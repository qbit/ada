#!/usr/bin/env node

var xmpp = require('simple-xmpp'),
fs = require('fs'),
pkey = '',
key_list = [],
message = {
	priority: 1,
	sound: 'magic',
	title: 'Enlighten.im Code Notification'
},
pushover = require('pushover-notifications'), push;

fs.readFile('pkey.json', function(e, data) {
	if (e) {
		throw e;
	}

	pkey = JSON.parse(data).key;

	push = new pushover({
		token: pkey
	});

	loadKeyList();
});

function loadKeyList() {
	fs.readFile('keys.json', function(e, d) {
		if (e) {
			throw e;
		}

		try {
			key_list = JSON.parse(d);
		} catch(e) {
			key_list = [];	
		}

		console.log('Loaded %d keys', key_list.length);
	});
}

function saveKeyList() {
	fs.writeFile('keys.json', JSON.stringify(key_list), function(e) {
		if (e) {
			throw e;
		}

		console.log('saved keys.json');
	});
}

xmpp.on('chat', function(from, msg) {
	var o = {}, i, l, found = false;
	var action = msg.match(/^(register|deregister|unregister)\s+(.*)/);

	if (action) {
		console.log(action[1] + 'ing', action[2]);
		if (action[1] === 'register') {
			o.user = from;
			o.key = action[2].replace(/\s+/g, '');
			if (o.key === '') {
				xmpp.send(from, 'invalid key');
				return;
			}
			key_list.push(o);
			xmpp.send(from, 'Added %s to notifications'.replace('%s', action[2]));
		} else {
			for (i = 0, l = key_list.length; i < l; i++) {
			console.log("'%s', '%s', '%s'",key_list[i], action[1], action[2]);
				if (key_list[i].user === from && key_list[i].key === action[2]) {
					found = true;
					key_list.splice(i, 1);
				}
			}

			if (found) {
				xmpp.send(from, 'Removed %s from notifications'.replace('%s', action[2]));
			} else {
				xmpp.send(from, 'Key %s not found!'.replace('%s', action[2]));
			}
		}
		saveKeyList();
	} else {
		xmpp.send(from, 'To register for pushover notifications say: "register <your user key>".');
		xmpp.send(from, 'To unregister for pushover notifications say: "unregister <your user key>".');
	}
});

xmpp.on('online', function() {
	xmpp.join('codez@conference.enlighten.im/ada');
	xmpp.join('codez-discuss@conference.enlighten.im/ada');
});

xmpp.on('buddy', function(jid, state) {
});

xmpp.on('error', function(error) {
	throw error;
});

xmpp.on('subscribe', function(from) {
	// auto accept people that want to talk to us - but only if they
	// are on enlighten.im - this may change later but keeping
	// Resistance players out will be hard.

	if ( from.match( /enlighten\.im/ ) ) {
		xmpp.acceptSubscription(from);
	}
});

xmpp.on('groupchat', function(conference, from, msg, stamp) {

	msg = msg.replace(/^\s+/, '');
	msg = msg.replace(/\s+$/, '');

	var i,l;
	if (conference === 'codez@conference.enlighten.im') {
		if ( ! msg.match(/\s/) && ! stamp) {
			for(i = 0, l = key_list.length;	i < l; i++) {
				message.user = key_list[i].key;
				message.message = msg;
				push.send( message, function(err, result) {
					if (err) {
						throw err;
					}
				});
			}
		}
	}
});


xmpp.connect({
	jid: process.env.JID,
	password: process.env.PASS,
	host: 'enlighten.im',
	port: process.env.PORT || 5222	
});

xmpp.getRoster();
